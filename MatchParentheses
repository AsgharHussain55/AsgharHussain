import java.util.Stack;

class MatchParentheses {
    public static void main(String[] args) {
        String expression = "((a+b)*[c/d])";
        boolean result = isBalanced(expression);
        System.out.println("Expression: " + expression);
        System.out.println("Balanced: " + result);
    }

    public static boolean isBalanced(String expr) {
        Stack<Character> stack = new Stack<>();

        for (char ch : expr.toCharArray()) {
            if (isOpeningBracket(ch)) {
                stack.push(ch);
            } else if (isClosingBracket(ch)) {
                if (stack.isEmpty() || !isMatchingPair(stack.pop(), ch)) {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }

    
    public static boolean isOpeningBracket(char ch) {
        return ch == '(' || ch == '[' || ch == '{';
    }

    
    public static boolean isClosingBracket(char ch) {
        return ch == ')' || ch == ']' || ch == '}';
    }

    public static boolean isMatchingPair(char open, char close) {
        return (open == '(' && close == ')') ||
               (open == '[' && close == ']') ||
               (open == '{' && close == '}');
    }
}


OUTPUT:
Expression: ((a+b)*[c/d])
Balanced: true
